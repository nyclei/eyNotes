#!/bin/bash

##############################################################################
#
# This tool could be run on any node of Mesos cluster, the node should have
# dcos cli installed, e.g. MasterNode1.
# (It can be run under 'root' or 'mesossu')
#
# Another requirement: /custom-kafka-connect docker image should be downloadable
# from cluster's docker registry,
#  e.g. /custom-kafka-connect:1.16.1 is better than old /kafka-client:latest
#
##############################################################################


# KAFKA_CONNECT_IMAGE_PATH='awssandbox.registry.rccl.com:10104/custom-kafka-connect:1.16.1'

if [ -z "$1" ]; then
    echo "Missing Kafka-connect image path"
    echo " Usage:   ./installKafkaServices.sh [KafkaConnectImagePath]  "
    echo " Example:"
    echo "   ./installKafkaServices.sh 'awssandbox.registry.rccl.com:10104/custom-kafka-connect:1.16.1'           # -- AwsSanbox"
    echo "   ./installKafkaServices.sh 'tst2-registry.nowlab.tstsh.tstrccl.com:10104/custom-kafka-connect:1.16.1' # -- ShipTst"
    echo "   ./installKafkaServices.sh 'shiptst2.registry.rccl.com:10104:10104/custom-kafka-connect:1.16.1'       # -- ShipTst2"
    echo "   ./installKafkaServices.sh 'registry.allure.sh.rccl.com:10104/custom-kafka-connect:1.16.1'            # -- Ship AL"
    echo "   ./installKafkaServices.sh 'dev2.registry.rccl.com:10104/custom-kafka-connect:1.16.1'                 # -- AwsDev2"
    echo "   ./installKafkaServices.sh 'tst2.registry.rccl.com:10104/custom-kafka-connect:1.16.1'                 # -- AwsTst2"
    echo "   ./installKafkaServices.sh 'stg1.registry.rccl.com:10104/custom-kafka-connect:1.16.1'                 # -- AwsStage"
    echo "   ./installKafkaServices.sh 'stg-registry.nowlab.tstsh.tstrccl.com:10104/custom-kafka-connect:1.16.1'  # -- ShipStage"
    echo "   ./installKafkaServices.sh 'prd.registry.rccl.com:10104/custom-kafka-connect:1.16.1'                  # -- AwsProd"
    exit 1
fi

KAFKA_CONNECT_IMAGE_PATH=$1


# Check if the DC/OS CLI is in the PATH
CMD_FILE=$(which dcos)
if [ "$CMD_FILE" == "" ]
then
    echo
    echo " The DC/OS Command Line Interface binary is not installed or not in your path. Please install it."
    echo " Exiting."
    echo
    exit 1
fi

# Check if the DC/OS CLI is greater than 0.4.12
CLI_VER=$(dcos --version | grep dcoscli.version | cut -d '=' -f 2)
CLI_VER_MINOR=`echo $CLI_VER | cut -d '.' -f 2 `
CLI_VER_PATCH=`echo $CLI_VER | cut -d '.' -f 3 `
#echo "CLI Minor and Patch == $CLI_VER_MINOR $CLI_VER_PATCH"
if ! [ "$CLI_VER_MINOR" -ge "4" ] && [ "$CLI_VER_PATCH" -ge "13" ]
then
    echo
    echo " Your DC/OS CLI version is not correct. Please upgrade your CLI version."
    echo " Exiting. "
    exit 1
fi

# Check if user is logged into the CLI
while true
do
    AUTH_TOKEN=$(dcos config show core.dcos_acs_token 2>&1)
    if [[ "$AUTH_TOKEN" = *"doesn't exist"* ]]
    then
        echo
        echo " Not logged into the DC/OS CLI. Running login command now. Or press CTL-C "
        echo
        dcos auth login
    else
        break
    fi
done

# Check if the dcos acs token is valid
while true
do
    RESULT=$(dcos node 2>&1)

    if [[ "$RESULT" = *"Your core.dcos_acs_token is invalid"* ]]
    then
        echo
        echo " Your DC/OS dcos_acs_token is invalid. Running login command now. Or press CTRL-C "
        echo
        dcos auth login
    else
        break
    fi
done


function installSchemaRegistry() {   # do not indent in this function

read -r -p "Schema Registry CPUs [0.2~2~] (unit): " SR_CPUS
SR_CPUS=${SR_CPUS:-2}
echo " => Schema Registry CPUs=$SR_CPUS"

read -r -p "Schema Registry MEMs [512~8192~] (M): " SR_MEMS
SR_MEMS=${SR_MEMS:-8192}
echo " => Schema Registry MEMs=$SR_MEMS"

read -r -p "Schema Registry HAPROXY_0_VHOST [10.154.105.158,10.154.105.159,..]: " SR_VHOST
SR_VHOST=${SR_VHOST:-10.16.5.56,10.16.5.45}

read -r -p "Schema Registry Zookeeper Node Host/IP [master.mesos]: " SC_ZK_HOST
SC_ZK_HOST=${SC_ZK_HOST:-master.mesos}
echo " => Schema Registry Zookeeper Node Host/IP=$SC_ZK_HOST"

JVMHEAP="-Xmx"$((SR_MEMS / 2))"M"  # Unit Mega, e.g. "-Xmx256M"
SR4_JSON='/tmp/schema-registry.json'
cat > $SR4_JSON <<- EndOF
{
  "id": "/confluent/schema-registry",
  "cmd": "if [ \"http\" = \"http\" ]; then export SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION=\"\" SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD=\"\" SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION=\"\" SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD=\"\"; fi && export SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:\$PORT0 && /etc/confluent/docker/run",
  "cpus": $SR_CPUS,
  "mem": $SR_MEMS,
  "disk": 0,
  "instances": 2,
  "acceptedResourceRoles": [
    "*"
  ],
  "container": {
    "type": "DOCKER",
    "docker": {
      "forcePullImage": true,
      "image": "master.mesos:5000/cyanconfluent/cp-schema-registry:4.0.0-1",
      "parameters": [],
      "privileged": false
    },
    "volumes": [],
    "portMappings": [
      {
        "containerPort": 10131,
        "servicePort": 10131,
        "hostPort": 10131,
        "protocol": "tcp",
        "name": "schema-registry",
        "labels": {
          "VIP_0": "schema-registry:8081"
        }
      }
    ]
  },
  "env": {
    "SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION": "/tmp/kafka-truststore.jks",
    "SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL": "PLAINTEXT",
    "SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL": "http",
    "SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD": "changeit",
    "SCHEMA_REGISTRY_KAFKASTORE_TOPIC": "_schemas2",
    "SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION": "/tmp/kafka-keystore.jks",
    "SCHEMA_REGISTRY_SSL_CIPHER_SUITES": "TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
    "SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL": "DEBUG",
    "SCHEMA_REGISTRY_SSL_KEY_PASSWORD": "changeit",
    "SCHEMA_REGISTRY_KAFKASTORE_SSL_CIPHER_SUITES": "TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
    "SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD": "changeit",
    "SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS": "",
    "SCHEMA_REGISTRY_KAFKASTORE_SASL_KERBEROS_SERVICE_NAME": "kafka",
    "SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD": "changeit",
    "SCHEMA_REGISTRY_SCHEMA_REGISTRY_ZK_NAMESPACE": "dcos-service-confluent-kafka/schema-registry",
    "SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION": "/tmp/kafka-keystore.jks",
    "SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD": "changeit",
    "SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION": "/tmp/kafka-truststore.jks",
    "SCHEMA_REGISTRY_SSL_CLIENT_AUTH": "false",
    "SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM": "GSSAPI",
    "SCHEMA_REGISTRY_HEAP_OPTS": "$JVMHEAP",
    "SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN": "",
    "SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD": "changeit",
    "SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS": "2400000",
    "SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS": "2400000",
    "SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL": "$SC_ZK_HOST:2181/dcos-service-confluent-kafka"
  },
  "healthChecks": [
    {
      "command": {
        "value": "curl --cert \$MESOS_SANDBOX/.ssl/scheduler.crt --key \$MESOS_SANDBOX/.ssl/scheduler.key -k -I http://localhost:\$PORT0 | grep \"HTTP/1.1 200 OK\""
      },
      "gracePeriodSeconds": 300,
      "intervalSeconds": 60,
      "maxConsecutiveFailures": 3,
      "protocol": "COMMAND",
      "ipProtocol": "IPv4",
      "timeoutSeconds": 20,
      "delaySeconds": 15
    }
  ],
"labels": {
    "DCOS_PACKAGE_OPTIONS":"eyJyZWdpc3RyeSI6eyJuYW1lIjoiY29uZmx1ZW50L3NjaGVtYS1yZWdpc3RyeSIsInpvb2tlZXBlcl9uYW1lc3BhY2UiOiJkY29zLXNlcnZpY2UtY29uZmx1ZW50LWthZmthL3NjaGVtYS1yZWdpc3RyeSIsImxpc3RlbmVyX3Byb3RvY29sIjoiaHR0cCIsImtleXN0b3JlX3NlY3JldCI6IiIsInNzbF9jbGllbnRfYXV0aCI6ZmFsc2UsInZpcnR1YWxfbmV0d29ya19lbmFibGVkIjpmYWxzZSwidmlydHVhbF9uZXR3b3JrX25hbWUiOiJkY29zIiwiaW5zdGFuY2VzIjoxLCJjcHVzIjoyLCJtZW0iOjQwOTYsImhlYXAiOjIwNDgsInJvbGUiOiIqIiwiYWNjZXNzLWNvbnRyb2wtYWxsb3ctbWV0aG9kcyI6IiIsImFjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbiI6IiIsImNpcGhlcnMiOiJUTFNfUlNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2LFRMU19SU0FfV0lUSF9BRVNfMTI4X0NCQ19TSEEyNTYsVExTX1JTQV9XSVRIX0FFU18yNTZfR0NNX1NIQTM4NCxUTFNfUlNBX1dJVEhfQUVTXzI1Nl9DQkNfU0hBMjU2LFRMU19ESEVfUlNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2LFRMU19ESEVfUlNBX1dJVEhfQUVTXzEyOF9DQkNfU0hBMjU2LFRMU19ESEVfUlNBX1dJVEhfQUVTXzI1Nl9HQ01fU0hBMzg0LFRMU19ESEVfUlNBX1dJVEhfQUVTXzI1Nl9DQkNfU0hBMjU2LFRMU19FQ0RIRV9SU0FfV0lUSF9BRVNfMTI4X0dDTV9TSEEyNTYsVExTX0VDREhFX1JTQV9XSVRIX0FFU18xMjhfQ0JDX1NIQTI1NixUTFNfRUNESEVfUlNBX1dJVEhfQUVTXzI1Nl9HQ01fU0hBMzg0LFRMU19FQ0RIRV9SU0FfV0lUSF9BRVNfMjU2X0NCQ19TSEEzODQifSwia2Fma2EiOnsiem9va2VlcGVyX2Nvbm5lY3QiOiJtYXN0ZXIubWVzb3M6MjE4MS9kY29zLXNlcnZpY2UtY29uZmx1ZW50LWthZmthIiwiY2xpZW50X3NlY3VyaXR5X3Byb3RvY29sIjoiUExBSU5URVhUIiwia2VyYmVyb3NfZW5hYmxlZCI6ZmFsc2UsImNsaWVudF9zYXNsX21lY2hhbmlzbSI6IkdTU0FQSSIsImNsaWVudF9zYXNsX2tlcmJlcm9zX3NlcnZpY2VfbmFtZSI6ImthZmthIiwia2VyYmVyb3Nfa2V5dGFiX3NlY3JldCI6Il9fZGNvc19iYXNlNjRfX19rZXl0YWIiLCJrZXJiZXJvc19qYWFzX3NlY3JldCI6ImphYXMiLCJrZXJiZXJvc19rcmI1X3NlY3JldCI6ImtyYjUifX0=",
    "DCOS_PACKAGE_SOURCE": "http://master.mesos:8082/repo",
    "DCOS_PACKAGE_METADATA":"eyJwYWNrYWdpbmdWZXJzaW9uIjoiNC4wIiwibmFtZSI6ImNvbmZsdWVudC1zY2hlbWEtcmVnaXN0cnkiLCJ2ZXJzaW9uIjoiMS4xLjAtNC4wLjAiLCJtYWludGFpbmVyIjoicGFydG5lci1zdXBwb3J0QGNvbmZsdWVudC5pbyIsImRlc2NyaXB0aW9uIjoiQ29uZmx1ZW50IFNjaGVtYSBSZWdpc3RyeSBzZXJ2aWNlXG5cblx0RG9jdW1lbnRhdGlvbjogaHR0cDovL2RvY3MuY29uZmx1ZW50LmlvLzQuMC4wL3NjaGVtYS1yZWdpc3RyeS9kb2NzL2ludHJvLmh0bWwiLCJ0YWdzIjpbImthZmthIiwiY29uZmx1ZW50Iiwic2NoZW1hIiwicmVnaXN0cnkiXSwic2VsZWN0ZWQiOmZhbHNlLCJzY20iOiJodHRwczovL2dpdGh1Yi5jb20vY29uZmx1ZW50aW5jL3NjaGVtYS1yZWdpc3RyeSIsImZyYW1ld29yayI6ZmFsc2UsInByZUluc3RhbGxOb3RlcyI6IlByZXBhcmluZyB0byBpbnN0YWxsIGNvbmZsdWVudC1zY2hlbWEtcmVnaXN0cnkiLCJwb3N0SW5zdGFsbE5vdGVzIjoiY29uZmx1ZW50LXNjaGVtYS1yZWdpc3RyeSBoYXMgYmVlbiBpbnN0YWxsZWQuIiwicG9zdFVuaW5zdGFsbE5vdGVzIjoiY29uZmx1ZW50LXNjaGVtYS1yZWdpc3RyeSB3YXMgdW5pbnN0YWxsZWQgc3VjY2Vzc2Z1bGx5LiIsImxpY2Vuc2VzIjpbeyJuYW1lIjoiQXBhY2hlIExpY2Vuc2UgdjIiLCJ1cmwiOiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vY29uZmx1ZW50aW5jL3NjaGVtYS1yZWdpc3RyeS9tYXN0ZXIvTElDRU5TRSJ9XSwiaW1hZ2VzIjp7Imljb24tc21hbGwiOiJodHRwOi8vbWFzdGVyLm1lc29zOjgwODIvY29uZmx1ZW50LXNjaGVtYS1yZWdpc3RyeS8xLjEuMC00LjAuMC9pbWFnZXMvQ29uZkljb25fc21hbGwucG5nIiwiaWNvbi1tZWRpdW0iOiJodHRwOi8vbWFzdGVyLm1lc29zOjgwODIvY29uZmx1ZW50LXNjaGVtYS1yZWdpc3RyeS8xLjEuMC00LjAuMC9pbWFnZXMvQ29uZkljb25fbWVkaXVtLnBuZyIsImljb24tbGFyZ2UiOiJodHRwOi8vbWFzdGVyLm1lc29zOjgwODIvY29uZmx1ZW50LXNjaGVtYS1yZWdpc3RyeS8xLjEuMC00LjAuMC9pbWFnZXMvQ29uZkljb25fbGFyZ2UucG5nIn19",
    "DCOS_PACKAGE_DEFINITION":"",
    "DCOS_PACKAGE_VERSION": "1.1.0-4.0.0",
    "DCOS_PACKAGE_NAME": "confluent-schema-registry",
    "HAPROXY_0_HTTP_BACKEND_PROXYPASS_PATH": "/schema-registry",
    "HAPROXY_0_PATH": "/schema-registry",
    "HAPROXY_0_VHOST": "$SR_VHOST",
    "HAPROXY_GROUP": "external"
  },
  "networks": [
    {
      "mode": "container/bridge"
    }
  ]
}
EndOF

echo "> dcos marathon app add $SR4_JSON"
dcos marathon app add $SR4_JSON
echo
}



function installRestProxy() {  # do not indent in this function
read -r -p "Rest Proxy CPUs [0.2~2~] (unit): " RP_CPUS
RP_CPUS=${RP_CPUS:-2}
echo " => Rest Proxy CPUs=$RP_CPUS"

read -r -p "Rest Proxy MEMs [512~32384~] (M): " RP_MEMS
RP_MEMS=${RP_MEMS:-32384}
echo " => Rest Proxy MEMs=$RP_MEMS"

read -r -p "Rest Proxy HAPROXY_0_VHOST (10.154.105.158,10.154.105.159): " RP_VHOST
RP_VHOST=${RP_VHOST:-10.16.5.56,10.16.5.45}

JVMHEAP="-Xmx"$((RP_MEMS / 2))"M"  # Unit Mega, e.g. "-Xmx256M"
RP4_JSON='/tmp/rest-proxy.json'
cat > $RP4_JSON <<- EndOF
{
  "id": "/confluent/rest-proxy",
  "cmd": "export KAFKA_REST_LISTENERS=http://0.0.0.0:\$PORT0 && /etc/confluent/docker/run",
  "cpus": $RP_CPUS,
  "mem": $RP_MEMS,
  "disk": 0,
  "instances": 2,
  "acceptedResourceRoles": [
    "*"
  ],
  "container": {
    "type": "DOCKER",
    "docker": {
      "forcePullImage": false,
      "image": "master.mesos:5000/cyanconfluent/cp-kafka-rest:4.0.0-1",
      "parameters": [],
      "privileged": false
    },
    "volumes": []
  },
  "env": {
    "KAFKA_REST_CLIENT_SECURITY_PROTOCOL": "PLAINTEXT",
    "KAFKA_REST_SCHEMA_REGISTRY_URL": "http://schema-registry.marathon.l4lb.thisdcos.directory:8081",
    "KAFKA_REST_BOOTSTRAP_SERVERS": "broker.confluent-kafka.l4lb.thisdcos.directory:9092",
    "KAFKA_REST_ZOOKEEPER_CONNECT": "master.mesos:2181/dcos-service-confluent-kafka",
    "KAFKA_REST_SSL_KEYSTORE_LOCATION": "/tmp/kafka-keystore.jks",
    "KAFKA_REST_SSL_TRUSTSTORE_LOCATION": "/tmp/kafka-truststore.jks",
    "KAFKA_REST_SSL_KEY_PASSWORD": "changeit",
    "KAFKA_REST_CLIENT_SASL_KERBEROS_SERVICE_NAME": "kafka",
    "KAFKA_REST_SSL_KEYSTORE_PASSWORD": "changeit",
    "KAFKA_REST_CLIENT_SSL_TRUSTSTORE_PASSWORD": "changeit",
    "KAFKA_REST_CLIENT_SSL_TRUSTSTORE_LOCATION": "/tmp/kafka-truststore.jks",
    "KAFKA_REST_CLIENT_SSL_KEYSTORE_LOCATION": "/tmp/kafka-keystore.jks",
    "KAFKA_REST_SSL_TRUSTSTORE_PASSWORD": "changeit",
    "KAFKAREST_HEAP_OPTS": "$JVMHEAP",
    "KAFKA_REST_CLIENT_SSL_KEYSTORE_PASSWORD": "changeit",
    "KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS": "",
    "KAFKA_REST_SSL_CLIENT_AUTH": "false",
    "KAFKA_REST_CLIENT_SASL_MECHANISM": "GSSAPI",
    "KAFKA_REST_CLIENT_SSL_CIPHER_SUITES": "TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
    "KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN": "",
    "KAFKAREST_OPTS": "-Djavax.net.ssl.trustStore=/tmp/kafka-truststore.jks -Djavax.net.ssl.trustStorePassword=changeit",
    "KAFKA_REST_SSL_CIPHER_SUITES": "TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
    "KAFKA_REST_CLIENT_SSL_KEY_PASSWORD": "changeit"
  },
  "healthChecks": [
    {
      "command": {
        "value": "curl --cert \$MESOS_SANDBOX/.ssl/scheduler.crt --key \$MESOS_SANDBOX/.ssl/scheduler.key -k -I http://localhost:\$PORT0 | grep \"HTTP/1.1 200 OK\""
      },
      "gracePeriodSeconds": 180,
      "intervalSeconds": 10,
      "maxConsecutiveFailures": 3,
      "protocol": "COMMAND",
      "ipProtocol": "IPv4",
      "timeoutSeconds": 20,
      "delaySeconds": 15
    }
  ],
  "labels": {
    "DCOS_PACKAGE_OPTIONS": "eyJyZXN0LXByb3h5Ijp7Im5hbWUiOiJjb25mbHVlbnQvcmVzdC1wcm94eSIsImxpc3RlbmVyX3Byb3RvY29sIjoiaHR0cCIsImtleXN0b3JlX3NlY3JldCI6IiIsInNzbF9jbGllbnRfYXV0aCI6ZmFsc2UsInZpcnR1YWxfbmV0d29ya19lbmFibGVkIjpmYWxzZSwidmlydHVhbF9uZXR3b3JrX25hbWUiOiJkY29zIiwiaW5zdGFuY2VzIjoyLCJjcHVzIjoyLCJtZW0iOjQwOTYsImhlYXAiOjEwMjQsInJvbGUiOiIqIiwiYWNjZXNzLWNvbnRyb2wtYWxsb3ctbWV0aG9kcyI6IiIsImFjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbiI6IiIsImNpcGhlcnMiOiJUTFNfUlNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2LFRMU19SU0FfV0lUSF9BRVNfMTI4X0NCQ19TSEEyNTYsVExTX1JTQV9XSVRIX0FFU18yNTZfR0NNX1NIQTM4NCxUTFNfUlNBX1dJVEhfQUVTXzI1Nl9DQkNfU0hBMjU2LFRMU19ESEVfUlNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2LFRMU19ESEVfUlNBX1dJVEhfQUVTXzEyOF9DQkNfU0hBMjU2LFRMU19ESEVfUlNBX1dJVEhfQUVTXzI1Nl9HQ01fU0hBMzg0LFRMU19ESEVfUlNBX1dJVEhfQUVTXzI1Nl9DQkNfU0hBMjU2LFRMU19FQ0RIRV9SU0FfV0lUSF9BRVNfMTI4X0dDTV9TSEEyNTYsVExTX0VDREhFX1JTQV9XSVRIX0FFU18xMjhfQ0JDX1NIQTI1NixUTFNfRUNESEVfUlNBX1dJVEhfQUVTXzI1Nl9HQ01fU0hBMzg0LFRMU19FQ0RIRV9SU0FfV0lUSF9BRVNfMjU2X0NCQ19TSEEzODQifSwia2Fma2EiOnsiYm9vdHN0cmFwX3NlcnZlcnMiOiJicm9rZXIuY29uZmx1ZW50LWthZmthLmw0bGIudGhpc2Rjb3MuZGlyZWN0b3J5OjkwOTIiLCJ6b29rZWVwZXJfY29ubmVjdCI6Im1hc3Rlci5tZXNvczoyMTgxL2Rjb3Mtc2VydmljZS1jb25mbHVlbnQta2Fma2EiLCJjbGllbnRfc2VjdXJpdHlfcHJvdG9jb2wiOiJQTEFJTlRFWFQiLCJrZXJiZXJvc19lbmFibGVkIjpmYWxzZSwiY2xpZW50X3Nhc2xfbWVjaGFuaXNtIjoiR1NTQVBJIiwiY2xpZW50X3Nhc2xfa2VyYmVyb3Nfc2VydmljZV9uYW1lIjoia2Fma2EiLCJrZXJiZXJvc19rZXl0YWJfc2VjcmV0IjoiX19kY29zX2Jhc2U2NF9fX2tleXRhYiIsImtlcmJlcm9zX2phYXNfc2VjcmV0IjoiamFhcyIsImtlcmJlcm9zX2tyYjVfc2VjcmV0Ijoia3JiNSJ9LCJzY2hlbWEtcmVnaXN0cnkiOnsidXJsIjoiaHR0cDovL2NvbmZsdWVudHNjaGVtYS1yZWdpc3RyeS5tYXJhdGhvbi5sNGxiLnRoaXNkY29zLmRpcmVjdG9yeTo4MDgxIn19",
    "DCOS_PACKAGE_SOURCE": "http://master.mesos:8082/repo",
    "DCOS_PACKAGE_METADATA": "eyJwYWNrYWdpbmdWZXJzaW9uIjoiNC4wIiwibmFtZSI6ImNvbmZsdWVudC1yZXN0LXByb3h5IiwidmVyc2lvbiI6IjEuMS4wLTQuMC4wIiwibWFpbnRhaW5lciI6InBhcnRuZXItc3VwcG9ydEBjb25mbHVlbnQuaW8iLCJkZXNjcmlwdGlvbiI6IkNvbmZsdWVudCBSRVNUIFByb3h5IHNlcnZpY2VcblxuXHREb2N1bWVudGF0aW9uOiBodHRwczovL2RvY3MuY29uZmx1ZW50LmlvLzQuMC4wL2thZmthLXJlc3QvZG9jcy9hcGkuaHRtbCIsInRhZ3MiOlsia2Fma2EiLCJjb25mbHVlbnQiLCJwcm94eSIsInJlc3QiXSwic2VsZWN0ZWQiOmZhbHNlLCJzY20iOiJodHRwczovL2dpdGh1Yi5jb20vY29uZmx1ZW50aW5jL2thZmthLXJlc3QiLCJmcmFtZXdvcmsiOmZhbHNlLCJwcmVJbnN0YWxsTm90ZXMiOiJQcmVwYXJpbmcgdG8gaW5zdGFsbCBjb25mbHVlbnQtcmVzdC1wcm94eSIsInBvc3RJbnN0YWxsTm90ZXMiOiJjb25mbHVlbnQtcmVzdC1wcm94eSBoYXMgYmVlbiBpbnN0YWxsZWQuIiwicG9zdFVuaW5zdGFsbE5vdGVzIjoiY29uZmx1ZW50LXJlc3QtcHJveHkgd2FzIHVuaW5zdGFsbGVkIHN1Y2Nlc3NmdWxseS4iLCJsaWNlbnNlcyI6W3sibmFtZSI6IkFwYWNoZSBMaWNlbnNlIHYyIiwidXJsIjoiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NvbmZsdWVudGluYy9rYWZrYS1yZXN0L21hc3Rlci9MSUNFTlNFIn1dLCJpbWFnZXMiOnsiaWNvbi1zbWFsbCI6Imh0dHA6Ly9tYXN0ZXIubWVzb3M6ODA4Mi9jb25mbHVlbnQtcmVzdC1wcm94eS8xLjEuMC00LjAuMC9pbWFnZXMvQ29uZkljb25fc21hbGwucG5nIiwiaWNvbi1tZWRpdW0iOiJodHRwOi8vbWFzdGVyLm1lc29zOjgwODIvY29uZmx1ZW50LXJlc3QtcHJveHkvMS4xLjAtNC4wLjAvaW1hZ2VzL0NvbmZJY29uX21lZGl1bS5wbmciLCJpY29uLWxhcmdlIjoiaHR0cDovL21hc3Rlci5tZXNvczo4MDgyL2NvbmZsdWVudC1yZXN0LXByb3h5LzEuMS4wLTQuMC4wL2ltYWdlcy9Db25mSWNvbl9sYXJnZS5wbmcifX0=",
    "DCOS_PACKAGE_DEFINITION": "eyJtZXRhZGF0YSI6eyJDb250ZW50LVR5cGUiOiJhcHBsaWNhdGlvbi92bmQuZGNvcy51bml2ZXJzZS5wYWNrYWdlK2pzb247Y2hhcnNldD11dGYtODt2ZXJzaW9uPXY0IiwiQ29udGVudC1FbmNvZGluZyI6Imd6aXAifSwiZGF0YSI6Ikg0c0lBQUFBQUFBQUFOVmI2M0xpeUpKK0ZRVy9aamJhV0FMVFkvbkVSaXhneEdWQU5yb2hPRHRCNkFhUzBXMmtFaGdtZW1OZlkxOXZuK1JrbFNRUVFtQzNkLzVzZE5BTnFxeTg1NWRaa3ZxdldxZ1pHMjN0K0d2RmltSW44R3RQdFljNlhmdFc4elhQZ2g5RzRLL2N4UExSWFdURjZDNk1ndmM5ckc2UDFFeWRxZE4zc0lmc2lpelgwbUxyeUl5aHY5VTh6ZkVSZkt3SXlFTXRRdkR0TGs3Q01JalFmeHo1MTUwQTlwdFdiRVJPaUZMZTNYeVJFbnFpUkwxaTRWUnNSVnZIc1A3VGh6L29PVEFTRHdnMHZPT0pzaEVLNDZmN2V6TXc0bnFSOVQxUjhINmpyVFlhc1lTUTNHdWhVN2VSNTRKa3BLM2oydE0vYTRRRWZoOTN3L2ZjYXJ5eDlzZTNXZ3hXR3NneWEwOSs0cnJ3Mi9CQTIxejQya0Yyb29ONDcvN0l4UEdOZ25CZ3RiUDAyRUZXem1FVmdidDNRYlRKTDRTUk5mUmpwTGt1SHlBTE5LdTlSaFk0RHlKRm9ZQnkwalhxU25qQ0lFYWw3VldVbEszRmxHNVpmczdQTXV2WmJ0bDNQckYvQi9zVC83aVppaFBEc09KNEJTYnNNU2NYQXVYSGVQOC8vOG96cWcwcFoxdlVPRjJpdGcyZ1N5SzM0TUJJMjlWVEp5WVFiQkNNY0JCditQUGUwMkprUmZmalliZkhpNzNhRDRpUjUvalBSaEFMcFlURStZb1QxZE1pRGRuNHlsKzFiYU1kaHBNRWpBREZKTXNMWFExSHBnWUJXUSs3bzNEUkhYNkhmMyt6bWlQWGFFNlJNUmh0cmNFbTBUME9MVlNHSFRxNzM0ZmR0ak52TUp2aEcrenhsQWVqeis3TmJtYzhsUmZqcWNLS2dzTExLdjAra2htQmt6YUtLQitZUzM1OTkyRDJsV1NoamxiNG10bG4zL1RHTzd1U2d1MzQwRTRtM1lmZCtLMzlmY1IxWG1WM3VodDI1OTZ3eTdwbWY3S2ROOWhrNGIwemkxbUxIamNFK0kxY3d3RWRaZy9PdUozYW9mczhQWisxM2hicXhIbHhPaGZ5dFZrTDVIUEp2S0VjVmlvZGQ1MDIyTUx2ekN2MDgyYUhNWm9NbS9GSGl4bGRTYWZQRkhUaXg5Z2dCL1J3d2M0aDBMY2RvOC90elg0TDlHVU9wdHJaNmMwUlBlM3pXOTFieE9aTVNjeHVLOVQzdzF5ZnJlNExtQWZRUTF3R01mWTlsazliYXNjbC90OHduRXl6VWhZWHZMYlJHM3lVeXV2OFJ2aWsxME45eHZrTHNSRGZCc3NZSHUrT1BlNWdOQlRhMkxjZ0JrZDlrd1hFUkdzbys3SG5vdm5NZE1FdUorWFh5ZnpRWGx2TitNM3dsSVBaWlhhR3h6NVlZcXVocVNQYW5IR3gybWk1NXNEY0doNWFRYXpzdWZmdUxnWU1tK25ra0x6cE1iWXg2SVM2Wng2d1BiTmRrT2tMbjZPOWhVL1JKMjVuYS9oVDdOZUh5Zk42bit0VStEaGcxOTcwM0xlRjhnbmFZeDd1U0t6TVByODcrYldvd3p2WW9zVEd2aGlUYzE3S3hwMnFoemJoWXpYUmZxSHk5Rmp0N1BXbTNScDdMUnZ5Qk9jNjBXVzRMdXZTWVU5eGE2OVgwM1JkRlROZEJ1aTNjU252d01hOU9WQnNuWVBhVUlVbTVGV2tOcFJrUGh2Rmk1bkE1anlHL21LckR4U1UxWVYrbEFNOGgrVWFhU2d0b3lsQS9KUVYrQkhIbVlZY09OcHI3WUpic2JITi9wcllyNnN1NUNPdWQzYS9FRnQvYXMySmMrRi9uM2ZuSU45TThRZFpNK1JhNERPd3d6MzVwK0NYQ2g5OHFDL2txdGJnUEszUnc3UjdpQ0hFZzYvS3paL3hSd3g4dDZVYU9ObXJzSWZGaklmNEYyTFFMZFpsbWk4WTB3Q1BvQTZVdmR6bmFJMzRZUWo1eU96R0RXUXZQR1NQWjN5c3BSaUIrVU9kRGoveVl6U2ZMYUs1d2g3cFQvWmxHRlZaWjZNQ0RveW1jMVVJQ05ZNExLMnJiY0RiOTVCZzd5eTA1K29rSVhqc0RPT3lUYm1QMGo2UjJxQTJ5SjYvUlErdE9YSjRrV0NXZDFtbm84enZwT2FkTk83Y0t0MHpQTklXWTJMdDJkUmZKSDRqQno1YmcyRmQ2SDJPM2xjMngxemk4TDhaQmtLZXFQNVhhbkYwWENNNHdtVzJGMzNnTWR0RlgwNzE3N09RWDVuZUF5TGZ6SG9SNlNGQ1gvR2c3a0t6NzBJTnByVjl6Z3RqVHNyclBGZUxjVXQ1WVIrL1BBTk9GbjNxWSt6Q3ZaYU5TUXg4NGMzb251Mk53VDVYSDB4S2ZRYys3bUlrYzQrN2RCLzZyVlFyNEJjRzk1YnZxY3hTYkFaMGhuc2tQdWM0Nmk5Q3d4ZVkrZXg5QlhWRG13MTJyMTNFQysvanY3QVBjQ3RmYXhheDhxeW5FdDJ2MkZYWkIwdHoxRVdjaXppUTR4N3hBNWZXU1FYV2ZLN2Y1cmhRanM4WGNCLzBiWjFvNU10NGs5cFBaNHNydnFuR3grdDFXZXFmcDk2Z05uTzdTdGlkWXliUUdoN1k1N0dIeW41WWxSOVgrSSsvMEhOT3VJZDVDdmJjcVpvWlJnZTlDZjJvSWVmelFoVU9aUmcrS3NxcHh0RVQ3djg1bjNGa3Jycm8xVDYvTmRYUjIzRWVyUFFYeG1yK1orUkZoamRrdmk0UDdlZHZ5alY1eFQ2Ky9Vd2ZYNlh6a2dQWEcyYzZiVkJIZ0krOFVTU0ZZNGVDekUxVm1wMHEzSVQ0ZjZ6WXlCcGM1R3l3bUhHN2xjcndoVm03ZE9ZWnZVcU1BRHhISFpsakpVRVp6ZUFqNVRXUTZ6ejMySzA1NEduRDQzWTR2d3gvQVI4ZTUzL3VVMGVrdVQ1OFZwbU9ta1N6WTBGV3BzQnZOYVhaRnpoWFBTdmRraS85Y0t0RG5pM2diR0M0ZUk1dEpWQmJ4SS9IT1NHelhXVkdISnpQVmpMTmcvME0rUzNRTHRZZDRFa1JwZU01a0gvVCtncWFpOHgrTVRORHlQVTkrQUpxKy8yV3ZwMHB6UU4vbnVnS1BGOGx1Q2IxM2w4Vmh1VUZSUmhLdENCZHdRWjczZ0NmTkNlSVlDSFVtZDVsYkwzL3ZqWDNER0NuRU9nTjRYRExwcW5NUDBNOEpKWG1YeVZYRUNYNkhhNjlUeVRHWEVuTWFBUjJ2bnhCTnRTNDYwT1B2V1czSklNc3NGZVJjUjcwY0Y2d0U0bm1PMHJQZlpXY2lwbE9GZlltWUUyR3BZbm1vY1BWL0dKNENmd295eTZXeGN0Z0M2Y3luUTc0V1lYdnZYVE80Z000OS9xTG1Vc2YrVlRNS0xkeHExTHVXRkRjejlsVW1OM0hYb2pubXpqdm5UK0g1Wi9INWx2eEVHbGxBZkY0aFdzcnFjYytUeFZoSk5FUEg1NU5mbnF1TDljV3cwOVVHbkV6NVNkaWRkMzNLN25IU1RKamdoM1RiRmF3YlRnM3V4ck11RmZybStqQVQwUlplY0YxcVVEdFhjbjlnOUY0WCtXenZkcmdHTE52MzhyMVo2bm5jbEJmZ0NHQVJjcG9wSENnSTlRNjVNaXpSTy9LdmV4Tjc3c3VuQTlKdmtFdkNNMkJlMzd2NXpPeXNEMk1JQ3JnbTJzeEhUY0ZaSFR6V1o2aERSL3NIRlRsNDgvSitZci9wL1Q3U0pCYmYyTU5mYUR6L3pYZlRybHlySjNQWXN5blo2N2NSOFdlS3d0L3p0VUY5REJjMDhwZVV3V29kWnlENjBUdnM0QzdEK2s1RXpENFZieDFEbTBqb1IvYXB0ZExUbmtHZUZjNEsrYjdxOCtQdVQvUytFbE1SNWIzSkQ2VmZPZXFBbWYxVnF3M3pGQjNVbDdhekdDekhNeHlmb28wajdPeisydmVzTXYwNEhjRGFnSmpDUFJTbDhiWWdtZW5NYjZINHMzei9jVnI2OXhIVmhmNnVqcE5qQ1lmai8yMGY4aHAvMkEvenYzY1A5ekQySVB6UWhmWC9RNzNPZ2I2Z1pSaVc4Y0czdmhzdW5tZFZjZDYvTWxZUS8xYm43em5rdWQxbG9lWHVmSC95ZTRiT05EQmRTWEp5clBZNDE1RWhlY3Y1c01jZzV1OGpURlpueWt3ZzNHSnB2TG81dHhUa2dHMUswNDNNTXZCSEFZWUxTb2JGK1lpOW1VcU05eEhNb3V4T3QxRFpmT3ora2Y5WmlUM2JFNTJXVW1SWFZsUUpsZnVnL0toMGJjL21uMUwrUFlsM3FmN05kMFJudU5qNkczUE1OZSszVGpiNDc1STZ3Mm92WFFXaHA3RzhGTzUxVHMvdThQNkRHWkViMHJPd1VEWG1NL2VtZXljZzNFaUhuWnBtQ2ZCaDkzMkJ1SXVwZkhnWG9UZTZIWFdmVXp6T1oyek4rYnMzVFVBUnd4L3VoNkxETXdibS9Xb2w5N2p4M0dWTmtKWFl0WmJ3TW1EM21VUDBJT2docFFZMzYvSE14MWdTd1NmMGZEeS9CSkQvdEFMY20rV1Bka0c5ZmZpUEc0Qlk5OUE3d0RpVGI4NHdoU3dYcDUwTzQvRHZnbCtiYS9WN21pb2NNSjBmT2dsRTdHOW56eTMxeEtOaktFenpNOVptVC9NL1h6R3UzSWZNSHpHYm1UQVNzQzhEYm5IOWR4N21IU0x0RzVpOW5GdWNYR0pibGU0cittWWZSY3RaaXhqY3RBYk1NYVRleGlnd3hrdnhyWjYrUDR6NlIrMHBpNWN3ZU5DZmFEczAzdmQ3VU4zN1JLc3llNmpPNkRuRzV5VndDZUNDTG1Ubms4Vm1Qbjd5dm16aU10WmFRL3p5dkY1U001UDczTncxbncvbmJmaHpBcDQ4TysxSCtSeGFwQkVob1dmd1dseGJLRVlmMHNpQi8vN2d6eUN6WjhiLzFVekEyT1Rmbk04YlkwZno2VVAvZW9lY0ltZldqUk4zeHQ3elQ4K0lydzN3cnZUSThJbjhnRDRqcW45K0FHY0NRc2l6UUg2dTlqVDNQd0I1TlA5L1JualIvcXhjVi8xOFBPKzhPVDdQbVY0ang5WUQ0RjRTVGpXUTM5ZCs1YUs4Q3pUU2J5L1ZVYktzaWpFMVNMaW1iOVBCdUdZaVlpTnlMTDgyQTV3blBCVGFod2kxemw5aDAzT0dqc1YrSVpXaEp6VXhZVW4wL0FMN1VPc1lxQy9XUWE2ZU9JdkFDMFZGcC96VXluYkpDS1ArS2tDNjI4bE9lbnpaWkRnd0poWXpZdVFsR1ZLZHJwQUJTc0t3ZmZvY2g5NXd1MGJlRyttZjR6d28zakNhNlVsTG9KTEJUdC80RWZmNEh6STNTVmNRWUVSdUZkVXkrbW9JOTBObjF3UWZ5T3ZQRkJCbEw3NlVMK3BJQ2JCcW0yc2ZZeUN5RnJHRm9RVUZSWDdQVnVpc3FXeUxxWDEyL0t3ckRoMmw1QWtrSEpMTFVFMnFlUXpqbkpzbWRRS0RCaEkwcXRZcDJhMkJVR0lzRWwrZ1BDN0RwSDFaK0tBU0J3YlFrU2xEUEVhNW9sZkJ6QTBaRkZiUnlORU9HcFc5TC8vL1Q4eGhhSUVuRWRVTHVpcUI0RnJhWDVSMlpYbXhoYm91M1VpbEdqdTByY1FmaDFqYWZtYTd1STNQY3A2OThnQ2xkRlRHWDNxZ3A4WGsrZnU3Y3dzQ2NNT2VBc2MvMllRVENPSWNTRHlGSTVUTWRreVV3NHduM2c2OXY3cW1QTXhpVUhpWS85NWp1OTRHTWFZbzBqSFI5WWFnQmtEUUppY2MyOWN2TkR6S2xPeHJVVXBVNERJZ0FRT3ZsdWFZVk9GTjB0eTZXZFNHMGVwUGxFVEMvVXM3OXdpdXZGUUZqdXh2Q0RhVTc5TU9yOStTVzZMcVpKc1cxcDRKdnEzNzQ5bHlTTmxRbUc2WENhR3NGOGNuOEthNEtRdlNFWmF2UGtIZUNkSVhKUFNMZXEvR3Ezdmt3N2xXakU0eTlaODBCWkI3TDNVRnJ3WnAwUzFuMXJmSy9TTkF0YzYwN2YyYnhmMS9XeUZickF2cWhYNEx2NExpaEVvcVoyRGJKRHJ4QlRtZGxuK0lFWWpyd0RkNGVZTk5IZlk4QjIwUDJRSDVubDIxQzZraXhhaXRobzBLQnlaa1lYUW5tcW4zTG9adHpiaDloSTVhM0FpT05hRVhNV3VpRVBMY0ZZT1FFa3U2Yk9hQllUWHB4WER3ajZyV1pVT2hoTUN1cFVjSVkzRnBTQzJsN09oTkZpMmUrS1NhVHd1KzkzSlVoeTBjU3dyMTd1ZDd0VjF1Smp2Yno0K1ZLK1g5ajhQZWgvcVVFbnpFWjhLWFNwcFNueDYzYzlvZElYcVkxNFZXbDJoeW5nQlZjWDdpWjZuM2NYNHZUeUFFNU8wWnd5ZEkxSHNVVjBTYVVwTUhFQWFIbEM4SWlmSkVFeTZtNG5mUGN6R0U0S2pLYklWY2ZzUDNMckoyNGsvTTBhUkhkWEQxTVVFQlEwTGdXcGF1RXhiYUh3MkdoQkdSeElxSi9sb25OcWM3MHUzMWFsT0ZNQThEeTB0cEg3QlJRVVJvQnhFQWJMb1pPVU91WVZYT05OSnZ1NCt1SG9kd3cvdWFuVVQvR1pBYTk4L3NUVGIvQldQREFhT0NIVVprWlFuWmZveDBTMm1mbkdkRFViUFZFVXJBb3dNWXNyUVl1dlhPb1hmZWFSaVY3T0JFRWkwa2hPSmRiYTJKVENsNDRIUkM3YnBxNVBYKzNDcXdjOVkxTUI0Y1FoZ213VXhXc0pPSDhlNkVKSkZ2a2psaStWZzFPdDE2cXYyZk1OTmk3TGVqUkRRRDd0cDVVVGd6VFg4aXFCTmFBYjRWNGUrdFF1b3hBZTRpdzJZc2o0WVFjK09KQTNta2JuSGR0OWxtdHlWdkZOTFR4aDRlSVI1RXc2R2FGODVUcWVwbVUyRk9lWDFnZm8xVzZBU1BIdUN6VGhyRWo4ZElrbUhTNE1WMXlsRmN4MHpoZjZZZ3JubGlYb2R0NGU4MUZPbGI1UW9qdUd2dGpoZUZpL2kzN0J5MHcxSCtuUWNUN1B2dzFrekovelVoSm43VFlNQjNMTU1HQ0NjMkx2dU5DQ2pUbVFYL1ErTU9pMm5mc05GbSszT3NnOW93V1VTbmc0OGJZOHpTZlAzaFcxNHg4NTJZT0RTenFLMGRYQWJoMTNhVm5OY2JHcWQ2b3RpKzNXSUwrTE15Nnc3OGJxZFplbm1Xc2tMUno5bjJiWXNIeGd2UFhJRWhnOFBrTC9ubENGb0EwMGVUK200ckdCeVExVEtHR1pvTURIM2tBRVRuVTRzYzN6d3B1V1FVdzlVSnlFbWg1ZFJ1eTFtaUkyeDdXd3R2WHpiRGNjYU9sb09KeitrNlpYbnZrejlsT0w2OGErS2pNcHUxT0IzMDlPRm0yb3RsN2ptbHpwZzdmZUg1VEpUNmt6UE4wMkxiMm1KMXovVXNVQlUxSkJjenU1VjNGSVQwNTA3TDlKYk4xMEg2eDg3N2tSMDVqWjgrUk5LWWJxTHNlR3liVmYxRFR3K3hJWnRlZmlHMkJyNll2U1Q5MlBJWGlyZis4RW9RZDdvUHpsSkxHM0d5MVZsaEpPQ2tvWHg4WHhUbGtycTZYUklJa2lFbXhDUXRyZFJnQXZWQWN3K1FKUDU4RjdJMC8xOXlTSDEvTDhGWE8zTGovUWpjeEVBYk0wZitPSzVNK0ZDRXE0ak9BckVYQlI0K1gvdE1JT2RuMTZWZ3V6bTJiOEFzVTBNMTRnekFBQT0ifQ==",
    "DCOS_PACKAGE_VERSION": "1.1.0-4.0.0",
    "DCOS_PACKAGE_NAME": "confluent-rest-proxy",
    "HAPROXY_0_HTTP_BACKEND_PROXYPASS_PATH": "/kafka-api",
    "HAPROXY_0_PATH": "/kafka-api",
    "HAPROXY_GROUP": "external",
    "HAPROXY_0_VHOST": "$RP_VHOST"
  },
  "portDefinitions": [
    {
      "port": 10132,
      "labels": {
        "VIP_0": "confluent/rest-proxy:8082"
      },
      "name": "rest-proxy",
      "protocol": "tcp"
    }
  ]
}
EndOF

echo "> dcos marathon app add $RP4_JSON"
dcos marathon app add $RP4_JSON
echo
}



function installKafkaConnect() {
read -r -p "Kafka Connect $1 No of Instance [1~2] : " KC_INSTANCES
KC_INSTANCES=${KC_INSTANCES:-2}
echo " => Kafka Connect $1 No of Instance=$KC_INSTANCES"

read -r -p "Kafka Connect $1 CPUs [0.2~4~] (unit): " KC_CPUS
KC_CPUS=${KC_CPUS:-4}
echo " => Kafka Connect $1 CPUs=$KC_CPUS"

read -r -p "Kafka Connect $1 MEMs [256~8192~] (M): " KC_MEMS
KC_MEMS=${KC_MEMS:-8192}
echo " => Kafka Connect $1 MEMs=$KC_MEMS"

read -r -p "Kafka Connect $1 HAPROXY_0_VHOST (10.154.105.158,10.154.105.159): " KC_VHOST
KC_VHOST=${KC_VHOST:-10.16.5.56,10.16.5.45}

KC_NAME=$1
KC_SERVICE_PORT=$2

JVMHEAP="-Xmx"$((KC_MEMS / 2))"M"  # Unit Mega, e.g. "-Xmx256M"
KC4_JSON="/tmp/$KC_NAME.json"
cat > $KC4_JSON <<- EndOF
{
  "labels": {
    "DCOS_PACKAGE_RELEASE": "5",
    "DCOS_SERVICE_SCHEME": "http",
    "DCOS_PACKAGE_SOURCE": "http://master.mesos:8082/repo",
    "HAPROXY_GROUP": "external",
    "DCOS_PACKAGE_REGISTRY_VERSION": "3.0",
    "DCOS_SERVICE_NAME": "$KC_NAME",
    "DCOS_SERVICE_PORT_INDEX": "0",
    "HAPROXY_0_HTTP_BACKEND_PROXYPASS_PATH": "/kafka-$KC_NAME/",
    "HAPROXY_0_PATH": "/kafka-$KC_NAME/",
    "DCOS_PACKAGE_VERSION": "0.9.8-3.2.0",
    "DCOS_PACKAGE_NAME": "confluent-connect",
    "DCOS_PACKAGE_IS_FRAMEWORK": "false",
    "HAPROXY_0_VHOST": "$KC_VHOST"
  },
  "id": "/confluent/$KC_NAME",
  "acceptedResourceRoles": [
    "*"
  ],
  "backoffFactor": 1.15,
  "backoffSeconds": 1,
  "constraints": [
    [
      "hostname",
      "UNIQUE"
    ]
  ],
  "container": {
    "portMappings": [
      {
        "containerPort": 8085,
        "hostPort": 0,
        "labels": {
          "VIP_0": "connect:8085"
        },
        "protocol": "tcp",
        "servicePort": $KC_SERVICE_PORT
      }
    ],
    "type": "DOCKER",
    "volumes": [],
    "docker": {
      "image": "$KAFKA_CONNECT_IMAGE_PATH",
      "forcePullImage": true,
      "privileged": false,
      "parameters": []
    }
  },
  "cpus": $KC_CPUS,
  "disk": 0,
  "env": {
    "CONNECT_CONSUMER_INTERCEPTOR_CLASSES": "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor",
    "CONNECT_PRODUCER_INTERCEPTOR_CLASSES": "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor",
    "CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL": "http://schema-registry.marathon.l4lb.thisdcos.directory:8081",
    "CONNECT_KEY_CONVERTER": "io.confluent.connect.avro.AvroConverter",
    "CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL": "http://schema-registry.marathon.l4lb.thisdcos.directory:8081",
    "CONNECT_REST_PORT": "8085",
    "CONNECT_LOG4J_ROOT_LOGLEVEL": "WARN",
    "CONNECT_BOOTSTRAP_SERVERS": "broker.confluent-kafka.l4lb.thisdcos.directory:9092",
    "CONNECT_GROUP_ID": "dcos-$KC_NAME-group",
    "CONNECT_INTERNAL_KEY_CONVERTER": "org.apache.kafka.connect.json.JsonConverter",
    "CONNECT_STATUS_STORAGE_TOPIC": "dcos-$KC_NAME-status",
    "CONNECT_VALUE_CONVERTER": "io.confluent.connect.avro.AvroConverter",
    "CONNECT_ZOOKEEPER_CONNECT": "master.mesos:2181/dcos-service-confluent-kafka/",
    "KAFKA_HEAP_OPTS": "$JVMHEAP",
    "CONNECT_INTERNAL_VALUE_CONVERTER": "org.apache.kafka.connect.json.JsonConverter",
    "CONNECT_OFFSET_STORAGE_TOPIC": "dcos-$KC_NAME-offsets",
    "CONNECT_CONFIG_STORAGE_TOPIC": "dcos-$KC_NAME-configs"
  },
  "healthChecks": [
    {
      "gracePeriodSeconds": 120,
      "intervalSeconds": 60,
      "maxConsecutiveFailures": 3,
      "portIndex": 0,
      "timeoutSeconds": 20,
      "delaySeconds": 15,
      "protocol": "MESOS_HTTP",
      "path": "/",
      "ipProtocol": "IPv4"
    }
  ],
  "instances": $KC_INSTANCES,
  "maxLaunchDelaySeconds": 3600,
  "mem": $KC_MEMS,
  "gpus": 0,
  "networks": [
    {
      "mode": "container/bridge"
    }
  ],
  "requirePorts": false,
  "upgradeStrategy": {
    "maximumOverCapacity": 1,
    "minimumHealthCapacity": 1
  },
  "killSelection": "YOUNGEST_FIRST",
  "unreachableStrategy": {
    "inactiveAfterSeconds": 0,
    "expungeAfterSeconds": 0
  },
  "fetch": []
}
EndOF

echo "> dcos marathon app add $KC4_JSON"
dcos marathon app add $KC4_JSON
echo
}





# ----
read -r -p "Install Schema Registry?  [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    installSchemaRegistry && sleep 3
fi

read -r -p "Install Rest Proxy?  [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    installRestProxy && sleep 3
fi

read -r -p "Install kafka-connect?  [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    installKafkaConnect connect 10109 && sleep 3
fi

read -r -p "Install kafka-connect-cdc?  [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    installKafkaConnect connect-cdc 10110 && sleep 3
fi

read -r -p "Install kafka-connect-digital-commerce?  [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    installKafkaConnect connect-digital-commerce 10111 && sleep 3
fi

read -r -p "Install kafka-connect-ga?  [y/N] " response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
then
    installKafkaConnect connect-ga 10112 && sleep 3
fi
